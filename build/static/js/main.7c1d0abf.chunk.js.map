{"version":3,"sources":["components/styles/StyledSearchBox.js","components/SearchBox.js","components/styles/StyledGeolocation.js","components/Geolocation.js","components/styles/StyledWeatherDisplay.js","components/WeatherDisplay.js","components/styles/StyledWrapper.js","components/Wrapper.js","utils/fetchHelpers.js","assets/blue.jpg","assets/green.jpg","assets/orange.jpg","components/styles/StyledWeather.js","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["StyledSearchBox","styled","div","SearchBox","handleInput","handleSubmit","onSubmit","e","type","onChange","autoComplete","placeholder","StyledGeolocation","Geolocation","location","currentDate","city","state","country","StyledWeatherDisplay","WeatherDisplay","weather","currentTemp","weatherMain","tempMax","tempMin","Math","round","StyledWrapper","Wrapper","states","getGeocode","a","URL","process","fetch","then","data","json","result","features","geocodeList","coordinates","center","placeName","matching_text","text","context","getWeather","geocodeResult","lon","lat","split","weatherResult","current","temp","todayWeather","daily","description","max","min","StyledWeather","props","bgImage","blue","green","orange","Weather","useState","inputLocation","setInputLocation","setCurrentDate","setLocation","setWeather","fetchData","newLocation","now","Date","dateBuilder","response","useEffect","newWeather","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","hour","getHours","setBackground","preventDefault","target","value","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c1d0abf.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst StyledSearchBox = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 50px 15px 15px;\n\n  & input {\n    width: 100%;\n    max-width: 280px;\n    padding: 10px 15px;\n    border: none;\n    outline: none;\n    background-color: rgba(255, 255, 255, 0.3);\n    border-radius: 16px 0px 16px 0px;\n    border-bottom: 3px solid rgba(0, 0, 0, 0.3);\n\n    color: #313131;\n    font-size: 20px;\n    transition: all 0.3s ease-out;\n    &:focus {\n      background-color: rgba(255, 255, 255, 0.6);\n      border-color: rgba(0, 0, 0, 0.6);\n    }\n  }\n`\n\nexport default StyledSearchBox;","import React from 'react';\n\nimport StyledSearchBox from './styles/StyledSearchBox';\n\nconst SearchBox = ({ handleInput, handleSubmit }) => (\n  <StyledSearchBox>\n    <form onSubmit={(e) => { handleSubmit(e); }}>\n      <input type=\"text\" onChange={(e) => { handleInput(e); }} autoComplete=\"off\" placeholder=\"Введите город...\" />\n    </form>\n  </StyledSearchBox>\n);\n\nexport default SearchBox;","import styled from 'styled-components';\n\nconst StyledGeolocation = styled.div`\n  color: #fff;\n\n  h1 {\n    color: #fff;\n    font-size: 2.5rem;\n    font-weight: 500;\n    margin-bottom: 5px;\n  }\n\n  h3 {\n    font-size: 1rem;\n  }\n`\n\nexport default StyledGeolocation;","import React from 'react';\n\nimport StyledGeolocation from './styles/StyledGeolocation';\n\nconst Geolocation = ({ location, currentDate }) => (\n  <StyledGeolocation>\n    {/* <h1> Hamamatsu, JP </h1> */}\n    <h1> {location.city} </h1>\n    <h1> {location.state}, {location.country} </h1>\n    <h3> {currentDate} </h3>\n    {/* <h3> Thusday 10 January 2020 </h3> */}\n  </StyledGeolocation>\n);\n\nexport default Geolocation;","import styled from 'styled-components';\n\nconst StyledWeatherDisplay = styled.div`\n  color: #fff;\n\n  h1 {\n    font-size: 6.5rem;\n    font-weight: 900;\n    margin: 30px 0px;\n    text-shadow: 4px 10px rgba( 0, 0, 0, 0.6);\n    & span {\n      font-size: 5rem;\n      font-weight: 500;\n    }\n  }\n\n  h2 {\n    font-size: 2rem;\n    font-weight: 700;\n    font-style: italic;\n    margin-bottom: 15px;\n    text-shadow: 0px 4px rgba( 0, 0, 0, 0.6);\n  }\n\n  h3 {\n    font-size: 1.5rem;\n    font-weight: 500;\n    text-shadow: 0px 4px rgba( 0, 0, 0, 0.6);\n  }\n`\n\nexport default StyledWeatherDisplay;","import React from 'react';\n\nimport StyledWeatherDisplay from './styles/StyledWeatherDisplay';\n\nconst WeatherDisplay = ({ weather: { currentTemp, weatherMain, tempMax, tempMin } }) => (\n  <StyledWeatherDisplay>\n    <h1>{Math.round(currentTemp)}<span>&#186;C</span> </h1>\n    <h2>{weatherMain}</h2>\n    <h3>{Math.round(tempMin)}&#186;C / {Math.round(tempMax)}&#186;C</h3>\n    {/* <h1>15<span>&#186;C</span> </h1>\n    <h2>Sunny</h2>\n    <h3>13&#186;C / 16&#186;C</h3> */}\n  </StyledWeatherDisplay>\n);\n\nexport default WeatherDisplay;","import styled from 'styled-components';\n\nconst StyledWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  width: 100vw;\n  min-height: 100vh;\n  background-image: linear-gradient(to bottom, rgba( 0, 0, 0, 0.2), rgba(0, 0, 0, 0.6));\n`\n\nexport default StyledWrapper;","import React from 'react';\n\nimport SearchBox from './SearchBox';\nimport Geolocation from './Geolocation';\nimport WeatherDisplay from './WeatherDisplay';\n\nimport StyledWrapper from './styles/StyledWrapper';\n\nconst Wrapper = ({ handleInput, handleSubmit, states }) => (\n  <StyledWrapper>\n    <SearchBox handleInput={handleInput} handleSubmit={handleSubmit} />\n    <Geolocation location={states.location} currentDate={states.currentDate} />\n    <WeatherDisplay weather={states.weather} />\n  </StyledWrapper>\n);\n\nexport default Wrapper;","const MAPBOX_BASE = 'https://api.mapbox.com/geocoding/v5/mapbox.places/';\nconst WEATHER_BASE = 'https://api.openweathermap.org/data/2.5/onecall';\n\nconst getGeocode = async (location) => {\n  const URL = `${MAPBOX_BASE}${location}.json?types=place&access_token=${process.env.REACT_APP_MAP_TOKEN}`;\n\n  const geocodeList = await fetch(URL)\n    .then(data => data.json())\n    .then(result => result.features);\n\n  // The coordinates of the feature’s center in the form [longitude,latitude]\n  const coordinates = geocodeList[0].center;\n  // The ternary operator prevents return of placeName in non-Latin letters (places with Japanese letters for example)\n  const placeName = geocodeList[0].matching_text ? geocodeList[0].matching_text : geocodeList[0].text;\n\n  const state = geocodeList[0].context[0].text;\n  const country = geocodeList[0].context[1].text;\n  return { coordinates, placeName, state, country };\n}\n\nexport const getWeather = async (location) => {\n  const geocodeResult = await getGeocode(location);\n  const [lon, lat] = geocodeResult.coordinates;\n  // .split(/\\b\\s[Ss]hi\\b/) cut off japanese city sufix ('Iwata Shi' == after split() ==> 'Iwata')\n  const placeName = {\n    city: geocodeResult.placeName.split(/\\b\\s[Ss]hi\\b/)[0],\n    state: geocodeResult.state,\n    country: geocodeResult.country\n  }\n\n\n  const URL = `${WEATHER_BASE}?lat=${lat}&lon=${lon}&exclude=minutely,hourly,alerts&units=metric&lang=ru&appid=${process.env.REACT_APP_OW_API_KEY}`;\n\n  const weatherResult = await fetch(URL).then(data => data.json()).then(result => result);\n\n  const currentTemp = weatherResult.current.temp;\n  const todayWeather = weatherResult.daily[0];\n  const weatherMain = todayWeather.weather[0].description;\n  const tempMax = todayWeather.temp.max;\n  const tempMin = todayWeather.temp.min;\n\n  return [{ currentTemp, weatherMain, tempMax, tempMin }, placeName];\n}","export default __webpack_public_path__ + \"static/media/blue.610f9b44.jpg\";","export default __webpack_public_path__ + \"static/media/green.a361963b.jpg\";","export default __webpack_public_path__ + \"static/media/orange.839534d3.jpg\";","import styled from 'styled-components';\nimport blue from '../../assets/blue.jpg';\nimport green from '../../assets/green.jpg';\nimport orange from '../../assets/orange.jpg';\n\nconst StyledWeather = styled.div`\n  background-image: url(\n    ${props => {\n    if (props.bgImage === 'blue') {\n      return blue;\n    }\n    if (props.bgImage === 'green') {\n      return green;\n    }\n    if (props.bgImage === 'orange') {\n      return orange;\n    }\n  }}\n  );\n  background-size: cover;\n  background-position: top center;\n`\n\nexport default StyledWeather;","import React, { useState, useEffect } from 'react';\n\nimport Wrapper from './Wrapper';\n\nimport { getWeather } from '../utils/fetchHelpers';\n\nimport StyledWeather from './styles/StyledWeather';\n\nconst Weather = () => {\n  const [inputLocation, setInputLocation] = useState('Embu');\n  const [currentDate, setCurrentDate] = useState('');\n  const [location, setLocation] = useState({\n    city: '',\n    state: '',\n    country: ''\n  });\n  const [weather, setWeather] = useState({\n    currentTemp: 0,\n    weatherMain: '',\n    tempMax: 0,\n    tempMin: 0\n  });\n\n  useEffect(() => {\n    fetchData('Якутск').then(([newWeather, placeName]) => {\n      setWeather(newWeather);\n      setLocation(placeName);\n    });\n    // eslint-disable-next-line\n  },  []);\n\n  async function fetchData(newLocation) {\n    const now = new Date();\n    setCurrentDate(dateBuilder(now));\n    const response = await getWeather(newLocation);\n    return response;\n  }\n\n  const setBackground = () => {\n    const now = new Date();\n    const hour = now.getHours();\n    if (hour <= 7 || hour > 18) {\n      return 'blue';\n    }\n    if (hour > 7 && hour <= 15) {\n      return 'green';\n    }\n    return 'orange';\n  }\n\n  const dateBuilder = (d) => {\n    const months = [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\"];\n    const days = [\"Воскресенье\", \"Понедельник\", \"Вторник\", \"Среда\", \"Четверг\", \"Пятница\", \"Суббота\"];\n\n    const day = days[d.getDay()];\n    const date = d.getDate();\n    const month = months[d.getMonth()];\n    const year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`;\n  }\n\n  const handleInputLocation = (e) => {\n    e.preventDefault();\n    setInputLocation(e.target.value);\n  }\n\n  const getForecast = (e) => {\n    e.preventDefault();\n    fetchData(inputLocation).then(([newWeather, placeName]) => {\n      setWeather(newWeather);\n      setLocation(placeName);\n    });\n  }\n\n  return (\n    <StyledWeather bgImage={setBackground()}>\n      <Wrapper states={{ location, currentDate, weather }} handleInput={handleInputLocation} handleSubmit={getForecast} />\n    </StyledWeather>\n  );\n}\n\nexport default Weather;","import React from 'react';\n\nimport Weather from './components/Weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}